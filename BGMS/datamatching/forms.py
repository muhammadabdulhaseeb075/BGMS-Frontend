from django import forms
from geometriespublic.models import FeatureGroup, FeatureCode
from main.models import BurialOfficialType
from main.validators import bleach_validator
from _datetime import date

# TODO:add validation to forms

class MemorialForm(forms.Form):
    person_id = forms.UUIDField(widget=forms.HiddenInput(), required=False)
    memorial_id = forms.CharField(widget=forms.HiddenInput(), validators=[bleach_validator], required=False)
    marker_type = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'class':'form-control non-editable', 'readonly':'readonly', 'maxlength':'200'}))
    description = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'200'}))
    user_generated = forms.BooleanField(label='Generated by user', required=False, widget=forms.CheckboxInput(attrs={'class':'non-editable','DISABLED':'DISABLED'}))
    memorial_image = forms.ImageField(label='', required=False, widget=forms.FileInput(attrs={'type':'file', 'class': '', 'accept': 'image/*'}))
    memorial_thumbnail = forms.ImageField(label='', required=False, widget=forms.FileInput(attrs={'type':'file', 'class': '', 'accept': 'image/*'}))
    memorial_image_id_delete = forms.CharField(widget=forms.HiddenInput(), validators=[bleach_validator], required=False)
    feature_id = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'class':'form-control non-editable', 'readonly':'readonly', 'maxlength':'200'}))

    def createMemorialForm(self, memorial_data):
        mf = MemorialForm({'person_id': memorial_data.person_id if 'person_id' in memorial_data else '', 'memorial_id':memorial_data.get('memorial_id'), 'images': memorial_data.get('image_url_list'), 'marker_type': memorial_data.get('marker_type'), 'description': memorial_data.get('description'), 'memorial_images': memorial_data.get('images'), 'feature_id': memorial_data.get('feature_id')})
        return mf


class DeathPersonForm(forms.Form):
    title = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'3','class':'form-control', 'readonly':'readonly', 'maxlength':'30'}))
    nickname = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'4','class':'form-control', 'readonly':'readonly', 'maxlength':'100'}))
    first_names = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'1','class':'form-control', 'readonly':'readonly', 'maxlength':'200'}))
    last_name = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'2','class':'form-control', 'readonly':'readonly', 'maxlength':'35'}))
    age_str = forms.CharField(label='', validators=[bleach_validator], required=False , widget=forms.TextInput(attrs={'class':'form-control field-to-hide', 'readonly':'readonly', 'maxlength':'200'}))
    death_date = forms.DateField(label='',required=False, input_formats=['%d/%m/%Y'], widget=forms.DateInput(format=("%d/%m/%Y"),attrs={'placeholder': '', 'class':'form-control', 'readonly':'readonly'}))
    birth_date = forms.DateField(label='',required=False, input_formats=['%d/%m/%Y'], widget=forms.DateInput(format=("%d/%m/%Y"),attrs={'placeholder': '', 'class':'form-control', 'readonly':'readonly'}))
    gender = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'17','class':'form-control', 'readonly':'readonly', 'maxlength':'10'}))
    description = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'7','class':'form-control', 'readonly':'readonly', 'maxlength':'200'}))
    profession = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'21','class':'form-control', 'readonly':'readonly', 'maxlength':'50'}))
    residence_address = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'8','class':'form-control', 'readonly':'readonly', 'maxlength':'100'}))
    second_line = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'9','class':'form-control', 'readonly':'readonly', 'maxlength':'100'}))
    town = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'22','class':'form-control', 'readonly':'readonly', 'maxlength':'50'}))
    county = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'10','class':'form-control', 'readonly':'readonly', 'maxlength':'50'}))
    country = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'23','class':'form-control', 'readonly':'readonly', 'maxlength':'50'}))
    postcode = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'tabindex':'24','class':'form-control', 'readonly':'readonly', 'maxlength':'10'}))
    age_years = forms.IntegerField(label='',required=False , widget=forms.TextInput(attrs={'tabindex':'5','class':'form-control', 'readonly':'readonly'}))
    age_months = forms.IntegerField(label='',required=False , widget=forms.TextInput(attrs={'tabindex':'18','class':'form-control', 'readonly':'readonly'}))
    age_weeks = forms.IntegerField(label='',required=False , widget=forms.TextInput(attrs={'tabindex':'6','class':'form-control', 'readonly':'readonly'}))
    age_days = forms.IntegerField(label='',required=False , widget=forms.TextInput(attrs={'tabindex':'6','class':'form-control', 'readonly':'readonly'}))
    age_hours = forms.IntegerField(label='',required=False , widget=forms.TextInput(attrs={'tabindex':'19','class':'form-control', 'readonly':'readonly'}))
    age_minutes = forms.IntegerField(label='',required=False , widget=forms.TextInput(attrs={'tabindex':'20','class':'form-control', 'readonly':'readonly'}))
    id_person = forms.UUIDField(label='',required=False, widget=forms.TextInput(attrs={'class':'form-control', 'readonly':'readonly'}))
    graveplot_polygon_feature = forms.CharField(widget=forms.HiddenInput(), validators=[bleach_validator], required=False)
    impossible_date_day_person = forms.ChoiceField(choices=[(0,'day')]+[(x,x) for x in range(1,32)], required=False, widget=forms.Select(attrs={'tabindex':'11','DISABLED':'DISABLED'}))
    impossible_date_month_person = forms.ChoiceField(choices=[(0,'month'),(1,'Jan'),(2,'Feb'),(3,'Mar'),(4,'Apr'),(5,'May'),(6,'June'),(7,'July'),(8,'Aug'),(9,'Sept'),(10,'Oct'),(11,'Nov'),(12,'Dec')], required=False, widget=forms.Select(attrs={'tabindex':'12','DISABLED':'DISABLED'}))
    impossible_date_year_person = forms.ChoiceField(choices=[(0,'year')]+[(x,x) for x in reversed(range(1000,date.today().year + 1))], required=False, widget=forms.Select(attrs={'tabindex':'13','DISABLED':'DISABLED'}))
    impossible_date_day_death = forms.ChoiceField(choices=[(0,'day')]+[(x,x) for x in range(1,32)], required=False, widget=forms.Select(attrs={'tabindex':'14','DISABLED':'DISABLED'}))
    impossible_date_month_death = forms.ChoiceField(choices=[(0,'month'),(1,'Jan'),(2,'Feb'),(3,'Mar'),(4,'Apr'),(5,'May'),(6,'June'),(7,'July'),(8,'Aug'),(9,'Sept'),(10,'Oct'),(11,'Nov'),(12,'Dec')], required=False, widget=forms.Select(attrs={'tabindex':'15','DISABLED':'DISABLED'}))
    impossible_date_year_death = forms.ChoiceField(choices=[(0,'year')]+[(x,x) for x in reversed(range(1000,date.today().year + 1))], required=False, widget=forms.Select(attrs={'tabindex':'16','DISABLED':'DISABLED'}))

    def createDeathPersonForm(self, person_data):
        age = ''
        if person_data['age_years']:
            age += str(person_data['age_years'])
            if person_data['age_years']>1:
                age+= ' years '
            else:
                age+= ' year '
        if person_data['age_months']:
            age += str(person_data['age_months'])
            if person_data['age_months']>1:
                age+= ' months '
            else:
                age+= ' month '
        if person_data['age_weeks']:
            age += str(person_data['age_weeks'])
            if person_data['age_weeks']>1:
                age+= ' weeks '
            else:
                age+= ' week '
        if person_data['age_days']:
            age += str(person_data['age_days'])
            if person_data['age_days']>1:
                age+= ' days '
            else:
                age+= ' day '
        if person_data['age_hours']:
            age += str(person_data['age_hours'])
            if person_data['age_hours']>1:
                age+= ' hours '
            else:
                age+= ' hour '
        if person_data['age_minutes']:
            age += str(person_data['age_minutes'])
            if person_data['age_minutes']>1:
                age+= ' minutes '
            else:
                age+= ' minute '
        dpf = DeathPersonForm({
            'first_names': person_data['first_names'],
            'last_name': person_data['last_name'],
            'age_str': age,
            'death_date': person_data['death_date'],
            'birth_date': person_data['birth_date'],
            'gender': person_data['gender'],
            'description': person_data['description'],
            'profession': person_data['profession'],
            'id_person': person_data['id_person'],
            'age_years': person_data['age_years'],
            'age_months': person_data['age_months'],
            'age_weeks': person_data['age_weeks'],
            'age_days': person_data['age_days'],
            'age_hours': person_data['age_hours'],
            'age_minutes': person_data['age_minutes'],
            'residence_address': person_data['residence_address'],
            'second_line': person_data['second_line'],
            'town': person_data['town'],
            'county': person_data['county'],
            'country': person_data['country'],
            'postcode': person_data['postcode'],
            'profession': person_data['profession'],
            'impossible_date_day_person': person_data['impossible_date_day_person'],
            'impossible_date_month_person': person_data['impossible_date_month_person'],
            'impossible_date_year_person': person_data['impossible_date_year_person'],
            'impossible_date_day_death': person_data['impossible_date_day_death'],
            'impossible_date_month_death': person_data['impossible_date_month_death'],
            'impossible_date_year_death': person_data['impossible_date_year_death'],
            'title': person_data['title'],
            'nickname': person_data['nickname']
        })
        return dpf


class MatchingForm(forms.Form):
    headpoint_id = forms.CharField(label='',required=False, widget=forms.TextInput(attrs={'placeholder': 'Point id', 'class':'form-control headpoint', 'readonly':'readonly'}))
    headstone_id = forms.CharField(label='',required=False, widget=forms.TextInput(attrs={'placeholder': 'Headstone id', 'class':'form-control headstone', 'readonly':'readonly'}))
    graveplot_id = forms.CharField(label='',required=False, widget=forms.TextInput(attrs={'placeholder': 'Graveplot Id', 'class':'form-control graveplot', 'readonly':'readonly'}))


class SearchForm(forms.Form):
    first_names = forms.CharField(label='',required=False, widget=forms.TextInput(attrs={'placeholder': 'First names', 'class':'form-control', 'maxlength':'200'}))
    last_name = forms.CharField(label='',required=False, widget=forms.TextInput(attrs={'placeholder': 'Last name', 'class':'form-control', 'maxlength':'200'}))
    age = forms.IntegerField(label='',required=False , widget=forms.TextInput(attrs={'placeholder': 'Age (from)', 'class':'form-control'}))
    age_to = forms.IntegerField(label='',required=False , widget=forms.TextInput(attrs={'placeholder': 'Age (to)', 'class':'form-control'}))
    # death_date = forms.DateField(label='',required=False, input_formats=['%d/%m/%Y'], widget=forms.DateInput(format=("%d/%m/%Y"),attrs={'placeholder': 'Date of death (from)', 'class':'death_date form-control'}))
    # death_date_to = forms.DateField(label='',required=False, input_formats=['%d/%m/%Y'], widget=forms.DateInput(format=("%d/%m/%Y"), attrs={'placeholder': 'Date of death (to)', 'class':'death_date form-control'}))
    year_burial_date = forms.CharField(label='',required=False, widget=forms.TextInput(attrs={'placeholder': 'Burial Year (from)', 'class':'form-control'}))
    year_burial_date_to = forms.CharField(label='',required=False, widget=forms.TextInput(attrs={'placeholder': 'Burial Year (To)', 'class':'form-control'}))
    burial_date = forms.DateField(label='',required=False, input_formats=['%d/%m/%Y'], widget=forms.DateInput(format=("%d/%m/%Y"),attrs={'placeholder': 'Date of burial (from)', 'class':'death_date form-control'}))
    burial_date_to = forms.DateField(label='',required=False, input_formats=['%d/%m/%Y'], widget=forms.DateInput(format=("%d/%m/%Y"), attrs={'placeholder': 'Date of burial (to)', 'class':'death_date form-control'}))
    fuzzy_value = forms.IntegerField(label='',required=False)
    memorial_types = forms.ChoiceField()

    def __init__(self, *args, **kwargs):
        super(SearchForm, self).__init__(*args, **kwargs)
        self.fields["memorial_types"] = forms.ChoiceField(choices=[('','-')]+FeatureGroup.objects.get_memorial_types(), required=False, widget=forms.Select(attrs={'class':'form-control select-narrow'}))


class BurialOfficialForm(forms.Form):
    official_title = forms.CharField(label='', required=False, validators=[bleach_validator], widget=forms.TextInput(attrs={'class':'form-control non-editable', 'readonly':'readonly', 'maxlength':'200'}))
    official_type = forms.CharField(label='', required=False, validators=[bleach_validator], widget=forms.TextInput(attrs={'class':'form-control non-editable burial-official-type field-to-hide', 'readonly':'readonly', 'maxlength':'200'}))
    official_types = forms.ChoiceField()
    official_first_names = forms.CharField(label='', required=False, validators=[bleach_validator], widget=forms.TextInput(attrs={'class':'form-control non-editable', 'readonly':'readonly', 'maxlength':'200'}))
    official_last_name = forms.CharField(label='', required=False, validators=[bleach_validator], widget=forms.TextInput(attrs={'class':'form-control non-editable', 'readonly':'readonly', 'maxlength':'200'}))
    official_id = forms.CharField(widget=forms.HiddenInput(), validators=[bleach_validator], required=False)

    def __init__(self, *args, **kwargs):
        super(BurialOfficialForm, self).__init__(*args, **kwargs)
        self.fields["official_types"] = forms.ChoiceField(choices=[('','-')]+BurialOfficialType.objects.get_all(), required=False, widget=forms.Select(attrs={'DISABLED':'DISABLED', 'class':'choice-field'}))


class BurialForm(forms.Form):
    person_id = forms.UUIDField(widget=forms.HiddenInput(), required=True)
    burial_number = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'10'}))
    grave_number = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'20'}))
    section = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'20'}))
    subsection = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'20'}))
    burial_date = forms.DateField(label='',required=False, input_formats=['%d/%m/%Y'], widget=forms.DateInput(format=("%d/%m/%Y"),attrs={'placeholder': '', 'class':'form-control', 'readonly':'readonly'}))
    cremation_certificate_no = forms.CharField(label='', validators=[bleach_validator], required=False, widget=forms.TextInput(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'35'}))
    depth = forms.CharField(label='',required=False , validators=[bleach_validator], widget=forms.TextInput(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'15'}))
    user_remarks = forms.CharField(label='',required=False, validators=[bleach_validator], widget=forms.Textarea(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'200'}))
    burial_remarks = forms.CharField(label='',required=False, validators=[bleach_validator], widget=forms.Textarea(attrs={'class':'form-control', 'readonly':'readonly', 'maxlength':'200'}))
    consecrated = forms.BooleanField(label='Consecrated?', required=False, widget=forms.CheckboxInput(attrs={'DISABLED':'DISABLED'}))
    interred = forms.BooleanField(label='interred?', required=False, widget=forms.CheckboxInput(attrs={'DISABLED':'DISABLED'}))
    requires_investigation = forms.BooleanField(label='requires_investigation?', required=False, widget=forms.CheckboxInput(attrs={'DISABLED':'DISABLED'}))
    graveplot_polygon_feature = forms.CharField(widget=forms.HiddenInput(), validators=[bleach_validator], required=False)
    impossible_date_day = forms.ChoiceField(choices=[(0,'day')]+[(x,x) for x in range(1,32)], required=False, widget=forms.Select(attrs={'DISABLED':'DISABLED'}))
    impossible_date_month = forms.ChoiceField(choices=[(0,'month'),(1,'Jan'),(2,'Feb'),(3,'Mar'),(4,'Apr'),(5,'May'),(6,'June'),(7,'July'),(8,'Aug'),(9,'Sept'),(10,'Oct'),(11,'Nov'),(12,'Dec')], required=False, widget=forms.Select(attrs={'DISABLED':'DISABLED'}))
    impossible_date_year = forms.ChoiceField(choices=[(0,'year')]+[(x,x) for x in reversed(range(1000,date.today().year + 1))], required=False, widget=forms.Select(attrs={'DISABLED':'DISABLED'}))
    burial_image_input = forms.ImageField(label='', required=False, widget=forms.FileInput(attrs={'type':'file', 'class': '', 'accept': 'image/*'}))

    def createBurialForm(self, burial_data):
        bf = BurialForm({'person_id': burial_data['person_id'],'burial_record_image': burial_data['burial_record_image'],'user_remarks': burial_data['user_remarks'], 'burial_number': burial_data['burial_number'],\
                        'burial_date': burial_data['burial_date'], 'consecrated': burial_data['consecrated'], 'cremation_certificate_no':burial_data['cremation_certificate_no'], 'interred':burial_data['interred'], \
                        'depth': burial_data['depth'], 'requires_investigation':burial_data['requires_investigation'], 'burial_remarks': burial_data['burial_remarks'],\
                        'grave_number': burial_data['grave_number'], 'section': burial_data['section'], 'subsection': burial_data['subsection'],\
                        'impossible_date_day': burial_data['impossible_date_day'], 'impossible_date_month': burial_data['impossible_date_month'], 'impossible_date_year': burial_data['impossible_date_year'] })
        return bf
